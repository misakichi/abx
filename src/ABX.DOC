バッチ生成支援  ABX v1.00



■  はじめに

    ABX は以下のような使い方があります。

      [1] どっかのディレクトリにある、とあるファイルを探す。

	    例) abx -r a:\filename.ext
		A:のディレクトリのどっかにある filename.extを探す.

      [2] 指定ファイル名を検索し, 該当ファイル名の各々に対し、某かの
	  コマンドを実行するバッチを生成する。

	    例) abx *.MKI =MAG $f$nPI -S $g >a.bat
		カレントディレクトリにあるすべての.MKI画像ファイルを、
		MAG.exeで表示しPi.exeでセーブすることで.PIファイルに
		変換するバッチ a.bat を生成.

      [3] 指定ファイル名を検索し, 該当ファイル名の各々に対し、某かの
	  コマンドを実行するバッチを生成し、そく実行する。

	    例) abx -x *.MKI =MAG $f$nPI -S $g
		カレントディレクトリにあるすべての.MKI画像ファイルを、
		MAG.exeで表示しPi.exeでセーブすることで.PIファイルに
		変換するバッチを生成して、それを実行.

      [4] 複数の変換方法を記述した定義ファイルを用意し、そのうち１つ
	  の変換方法を用いて、検索したファイルに対し某かのコマンドを
	  実行するバッチを生成／実行する。

	    例) abx +cg_cnv :mki2pi *
		定義ファイル cg_cnv.abx で定義された変換方法 :mki2pi
		を用いて、.MKI ファイルを.PIファイルに変換する。



■  起動方法

      abxの使い方は大別して、■はじめに、に書いた[1]〜[3] のように、
    その場でちょこちょこっと変換方法を指定してバッチを作るばあいと、
    [4] のように予め変換方法を集めた定義ファイルを作ってそれを用いる
    場合の２つに別れます。

      コマンドラインでの指定方法は以下のような感じです。

	(1) abx [-ｵﾌﾟｼｮﾝ] [ﾌｧｲﾙ名] [=変換文字列]

	(2) abx [+ABXFILE] :変換名 [-ｵﾌﾟｼｮﾝ] [ﾌｧｲﾙ名]

    オプションとファイル名は順番が混ざっていてもかまいません。
    オプションを処理したあと、まとめてファイル名の処理をします。

    (1),(2)とも上記以外に@RESFILE（レスポンスファイル指定）, $文字列
    （変数$1〜$9の設定）という指定もあります  （ -オプションと一緒に
    処理されます）。

    =変換文字列 は、 後ろにしかおけません（というか = が現れた時点で
    以降は、変換文字列として扱われます）。

    =変換文字列 が省略されたばあいは（定義ファイル／レスポンスファイ
    ルにも記述されていない場合は）、=$f （フルパス表示）が指定された
    ことになります。



■  ファイル名指定でのワイルドカード文字

      ファイル指定ではワイルド・カード機能があり、以下の

	*       0文字以上の任意の文字列に一致
	?       任意の一文字に一致
	[..]    [ ] 内の文字列のどれか一文字に一致
	[^..]   [^ ] 内の文字列以外の一文字に一致
		括弧内では 0-9 のように'-'による範囲指定も可
                また、括弧内では他のワイルドカード文字は機能しない

    があります。また、パスの区切りとして \ だけでなく / も使えます。



■  -オプション

    -で始まるオプションは以下のものがあります。
    （/ はオプションではなく、パスの区切りとして使われます）

	-x	  バッチ実行する
		  テンポラリ・ディレクトリに _ABX_TMP.BAT というバッ
		  チ・ファイルを生成し、そのバッチを実行します。
		  生成されたバッチ・ファイルは削除されません。
	
	-x-	  バッチ実行しない。
		  主に、定義ファイルで設定された -x を抑止するのを想
		  定しています。

	-r	  ディレクトリ再帰検索する。
		  ファイル検索において、指定ディレクトリだけでなく、
		  その下にあるサブディレクトリに対しても検索を行いま
		  す。

	-r-	  ディレクトリ再帰検索しない
		  主に、定義ファイルで設定された -r を抑止するのを想
		  定しています。

	-a{n|r|h|s|d|a} 検索ファイルの属性指定.
		  検索ファイルのファイル属性を設定します。

		  n	  nomal 属性のファイルを検索
		  r	  Read Only 属性のファイルを検索
		  h	  Hidden 属性のファイルを検索
		  s	  System 属性のファイルを検索
		  d	  ﾃﾞｨﾚｸﾄﾘ属性のファイルを検索
		  a	  ｱｰｶｲﾌﾞ属性のファイルを検索

		  指定はもちろん一度に複数可能です。
		  基本的に指定した属性の何れかを持つファイルにマッチ
		  します。
		  が、Hidden & System をもつファイルは, h だけや sだ
		  けではマッチせず hs でないと駄目だったり、アーカイ
		  バ属性の扱いも？だったりします。
		  （DOSの不思議ということで^^;）

		  -a オプションの指定のない場合は -anrhsa （ディレク
		  トリ以外のファイル）が指定されたことになります。

	-b	  先頭にecho off、末に:ENDを付加
		  生成するバッチ・ファイルの先頭に echo off を付加し、
		  ファイル末に:END を付加します。
	
	-b-	  -b を抑止する
		  主に、定義ファイルで設定された -b を抑止するのを想
		  定しています。

	-o<FILE>  出力ﾌｧｲﾙ指定
		  生成した内容を<FILE>に出力します。
		  -x とは併用しないでください。

	-i<DIR>   検索ﾃﾞｨﾚｸﾄﾘ指定
		  ファイル指定で、相対パス指定されたファイル名の基準
		  ディレクトリをカレントでなく <DIR> にします。
		  絶対パス指定されたファイル名に対しては無効です。

		  以下のようなディレクトリを引き数とするバッチを作る
		  とき、やくだつかも （ディレクトリ名の最後に \ があ
		  ってもなくてもよいので）

		  例）
		      vvvvvvvvvvvvvvv バッチの内容 vvvvvvvvvvvvvvvvv
		      del -x -r -i%1 *.bak =del $f
		      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		      上記内容のファイルを delbak.bat とすれば、
		      > delbak a:\
		      というように指定できる.


	-w<DIR>   ﾃﾝﾎﾟﾗﾘ･ﾃﾞｨﾚｸﾄﾘ指定
		  バッチ実行や $w で参照されるテンポラリ・ディレクト
		  リを環境変数 TMP（またはTEMP）でなく <DIR>にします。

	-e<EXT>   ﾃﾞﾌｫﾙﾄ拡張子指定
		  指定されたファイル名に拡張子がついていないときに補
		  う拡張子を設定します。
		  主に定義ファイル中での指定を想定しています。
		  そのため特別に <EXT>として変数 $1〜$9 を指定するこ
		  とができます。


      指定は、-x -r のように分けて指定してください.   -xr のようには
    できません。ただし -a のみ、 -an -ar -ah でも -anrh でもかまいま
    せん。



■  =変換文字列  −−  生成するテキスト（バッチ）の記述

      コマンドラインにおいて =以降の部分は生成するテキストの記述とな
    り、$変換文字以外は、そのまま出力されます。

      $変換文字として以下のものがあります。
    （$c $x $p 等の一部は filmtn(ﾌｧｲﾙﾒﾝﾃﾅﾝｽ)のマクロをマネさせていた
      だきました... てか、マネたかったけど用途の違いにより非互換部分
      が多くなったとも:-）

	$f	ﾌﾙﾊﾟｽ(拡張子付)   	例) d:\dir\dir2\filename.ext

	$g	ﾌﾙﾊﾟｽ(拡張子無)   	例) d:\dir\dir2\filename

	$v	ﾄﾞﾗｲﾌﾞ            	例) d
	  	: は付かない。

	$p	ﾃﾞｨﾚｸﾄﾘ(ﾄﾞﾗｲﾌﾞ付)	例) d:\dir\dir2
	  	後ろに \ は付かない。

	$d	ﾃﾞｨﾚｸﾄﾘ(ﾄﾞﾗｲﾌﾞ無)	例) \dir\dir2
	  	後ろに \ は付かない。

	$c	ﾌｧｲﾙ(拡張子付)		例) filename.ext

	$x	ﾌｧｲﾙ(拡張子無)		例) filename

	$e	拡張子        		例) ext
	  	. は付かない。

	$w	ﾃﾝﾎﾟﾗﾘ･ﾃﾞｨﾚｸﾄﾘ. 
		コマンドラインで -w 指定時はその場所を、 なければ環境
		変数TMP(なければTEMP)の内容を、フルパスに変換したもの。
		後ろに \ は付かない。

	$1〜$9	コマンドラインで$指定された文字列。
		または定義ファイルにおいて、変換名検索で{〜}でマッチ
		した文字列。
		1〜9個まで。番号は出現順に振り当てられる.

	$$	$ そのもの

	$n	改行

	$t	タブ

	$s	空白


      コマンドラインの =以降において、連続した空白(ﾀﾌﾞやｽﾍﾟｰｽ)を置い
    た場合、生成されたテキスト（バッチ）においては、それらが１つの空
    白になったり、また、行末に置いた覚えのない空白が挿入されたりする
    ばあいがありますが、これらは仕様なので、気にしないでください:-）



■  レスポンス・ファイル

      レスポンス・ファイルは、コマンド・ラインで @resfile で指定され
    るファイルで、-オプション、ファイル、=変換文字列をそのファイルよ
    り読み込みます。

      =変換文字列以外に関しては、改行は空白とみなし、処理されます。
    また、# が見つかれば行末までをコメントとみなし空白として扱います。

      問題は = の扱いで、 コマンド・ラインとは少々違い、変換文字列の
    指定は = の直後からでなく、=のあった行の次の行から、ファイルの終
    わりまでとなります。また、改行が改行として扱われます（無理に$nと
    かを使う必要がなくなります）。  
    $変換文字による変換以外は行わずそのまま文字列を出力するため、#コ
    メントは使えません。

	例)  はじまめ、の [3]をレスポンスファイルに書き直すと、
		vvvvvvvvvvvvvvvvv ファイルの内容 vvvvvvvvvvvvvvvvvvv
		-eMKI		#ﾃﾞﾌｫﾙﾄ拡張子を MKI にする
		-x		# ﾊﾞｯﾁ実行
		=		# この次の行からEOF までが変換文字列
		mag $f
		pi -s $g
		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	    で、ファイル名を mki2pi.res とすると、

		> abx @mki2pi.res *

	    のようにできます。



■  定義ファイル(.ABX) を使うとき

      定義ファイルを用いた利用方法は以下のようになります。

	(2) abx [+ABXFILE] :変換名 [-ｵﾌﾟｼｮﾝ] [ﾌｧｲﾙ名]

    +ABXFILE で指定されるファイルが定義ファイルで拡張子は .ABXです。
    .ABX ファイルは、abx.exeと同じディレクトリに置く必要があります。
    （ようするに、相対パス指定ならば abx.exeのあるディレクトリを基準
      にし、フルパス指定ならばそのパスより読込みます）

    この+ファイル指定は省略可能で、そのばあい abx.abx が読込ます。
		       ~~~~~~~~
    :変換名 は : で始まり空白(ｽﾍﾟｰｽ,ﾀﾌﾞ)以外の文字からなる文字列です.
    :変換名 は、.ABXファイル中で定義された変換名で、この :変換名が指
    定された段階で .ABX ファイルは読み込まれます（つまり、+ABXFILEが
    指定されても :変換名が指定されないと読み込まれません）。



■  定義ファイル(.ABX)の書き方

      定義ファイルは、早い話し、複数のレスポンス・ファイルを１つにま
    とめたものです。
      もちろん、単純にファイルを繋げただけでは、定義の区切りがわかり
    ませんので、各定義の先頭に :文字列で始まる行を置き（行頭に空白を
    入れられません）、それで判別します。

      実行時は、コマンドラインで :変換名が指定されれば、定義ファイル
    を読み込み、 行頭に : がある行を探し、あればコマンドラインで指定
    された変換名と同じかどうか比較し、同じであれば、その次ぎの行から
    の定義を利用します。
      一つの定義の終わりは 次の : で始まる行の直前までです。
    （正確には : の行の一つ前の行の改行の手前までです）。

      :で始まる行の文字列は、空白が現れるまでを比較の対象とします。
    大文字小文字は区別しませんし、{ | } 以外の記号を含めることも出来
    ます（{ | } については次項を参照）。
    でも漢字にはちゃんと対応していないので駄目です^^;

      定義ファイル中でも、# で始まり改行までを改行までをコメントとし
    ますが、おける場所は、定義ファイルの頭と、各定義での =の直前まで
    の部分です。（ファイルの先頭には必ず１行はコメントが必要です）。

	例)  
		vvvvvvvvvvvvvvvvv ファイルの内容 vvvvvvvvvvvvvvvvvvv
		# 定義ファイル・サンプル
		:MKI2PI
			-eMKI
			-x
			=
			mag $f
			pi -s $g
		
		:Q4toPI
			-eMKI -x =
			hsx $f
			pi -s $g
		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	    で、ファイル名を tst.abx で abx.exe と同じ場所におくとす
	    ると、

		> abx +tst :q4topi *

	    のように使うことができます。



■  定義ファイルでの { | } を用いた :変換名 の指定

      この定義ファイルは、もともと画像や音楽ファイル等のファイル変換
    を想定して用意した機能で、いくつかのコンバータ(ソフト)を組み合わ
    せて使うことにより、より多くの種類間のコンバートを手軽に行おうと
    いうものです。

      これらの変換においては、データの種類は拡張子名で判別されること
    が多く、また、１つのコンバータ(ソフト)で複数の種類に対応している
    ものも結構あり、定義ファイルの定義において、単純な文字列比較だけ
    で記述すると、同じような定義を山ほど書くことになりたいへんなので、
    少し楽できる機能として次のようなものがあります。

     :変換名中の一部を {STR1|STR2|STR3} のように記述することにより、
    {〜} 中 | で区切られた何れかの文字列にマッチするようにし、マッチ
    した場合はマッチした文字列を変数 $1〜$9 に設定するようにしました。
    （{〜}の数は 9個まで。先頭から順に番号が1〜9まで振り当てられます）
      $1〜$9 は、変換文字列中（あと特別に -e で）に使用できます。

      コマンドラインで $文字列 していされたものは、:変換名で設定され
    た番号の続きに代入されます（コマンドラインにおいて、 $文字列指定
    は :変換名 より後ろに置かないと無効です）


	例)  
		vvvvvvvvvvvvvvvvv ファイルの内容 vvvvvvvvvvvvvvvvvvv
		# 定義ファイル・サンプル
		:PIC:{tif|bmp|rgb|q0|djp}			  #1
			-x -ePIC =
			picld .$1 $g

		:PIC:{mag|pi}					  #2
			-x -ePIC =
			picld .pmt $f -o$w\$x.pmt
			mg .pmt.$1 $w\$x.pmt -o$g.$1
			del $w\$x.pmt

		:{q0|rgb|bmp|djp}:PIC				  #3
			-x -e$1 =
			picsv .$1 $g

		:{mag|pi}:PIC					  #4
			-x -e$1 =
			mg .$1.pmt $g.$1 -o$w\$x.pmt
			picsv .$1 $w\$x.pmt -o$g.pic
			del $w\$x.pmt

		:{mag|pi|bmp|tif|djp}:{mag|pi|bmp|tif|djp|q0|rgb} #5
			-x -e$1 =
			mg .$1.$2 $g -o$g.$2
		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	    で、ファイル名を abx.abx で abx.exe と同じ場所におくとす
	    ると、

		> abx -r :mag:pic *

	    のように使うことができます。このばあい、#4の行でマッチし、
	    mg でmagファイルを適当な中間ファイル形式にしてテンポラリ
	    ・ディレクトリに生成し それを picsv が読み込み元のディレ
	    クトリに picファイルを生成します。あと作業ファイルを削除
	    します（-rを指定しているので、カレント・ディレクトリ以下
	    のディレクトリに対して行うことになる）



■  使用上の制限(限界)

      ・-xによるバッチ実行を行う場合は、必ず環境変数 TMP(またはTEMP)
        か -w でテンポラリ・ディレクトリを指定しておいてください。
        テンポラリ・ディレクトリは、生成したバッチの影響をうけない独
        立したディレクトリをちゃんと用意しませう。
        （知り合いとこで SET TMP=A:\DOS とかをみて(もちろんDOSのコマ
        ンドが入ってる)、ちとビびった覚えが...^^;）
        テンポラリの指定のないばあいはカレントディレクトリになってし
        まいます。

      ・-x をすると、テンポラリに _ABX_TMP.BATというファイルが作られ
        ますが実行後に削除するようなことはしてません。

      ・このプログラムでは指定されたファイル名は一旦フルパスに変換さ
        れるのですが、最大長として 250バイト位以下であることを前提と
        し、文字数チェックはやっておりません。そのため、非常識に深い
        ディレクトリのファイルを指定すると暴走の危険性があるかも ...

	もっとも、MS-DOS においては、普通これで困らないハズですが :)
	（当然、長い(256バイトだったけ？) 名前の使える新しいシステム
	  には対応してませんし）

      ・$1〜$9 の各サイズも 250バイト位です。

      ・定義ファイルの先頭一行は必ずコメントが必要です。プログラム的
        なことをいえば、行頭の : を探すのに単に strstr(buf,"\n:") を
        してるだけだからです. また、その絡みで :変換名の前行は、空行
        でないと駄目でせう。

      ・定義ファイルの最大サイズは、16K バイトです。それ以上あっても
        読み込みません。もっともそんなでっかい定義ファイル書くことな
        いでせう。

      ・１ファイル名あたりに生成されるテキストの最大サイズも 16Kバイ
        トです。それより大きいとメモリ破壊を興すでしょう。
        もっとも、よほど複雑にしない限り、１ファイル名に対し生成され
        るテキストは１Ｋバイトにも満たないものなので十分でせう。

      ・定義ファイルは ABX.ABX とすることで コマンドラインでの指定を
        省略できますが、実は実行ファイル名の拡張子を.ABXに取り替えた
        ファイル名であればよく、逆に、実行ファイル名を定義ファイルご
        とに変えて用意する、という方法もあります。



■  たわごと

      各種コンバータを交互に起動するタイプの画像コンバータを作らにゃ
    なあ思いつつ、自分が使う分には abx の前身の plcfという自作ツール
    （ファイル名をうめ込んだテキストを生成するだけ）でそのつどバッチ
    を生成してりゃすんでたので作らずじまいだったのですが、他人にコン
    バート作業をやってもらうとなると結構めんどくさいものでしかたない
    ので重い腰を上げた、と。でもって plcf のデキがいまいちで作りなお
    したかったこともあり、めんどくさいのでイッショクタにしてしまった、
    と。

      画像専用で各種コンバータ呼び出しコンバータを作ったほうが呼び出
    すプログラムにあわせた特化した設定ができてよいかなとも思うのだけ
    ど、いろいろ使用するコンバータの事情考えたり調べたりするのはめん
    どくさく、また各コンバータがバージョンアップや使用変更があったと
    きのこと思うとやはりめんどくさいので、大味でいくことにしました。

    ま、各コンバータの細かいオプションとか設定するばあいは、そのつど、
    ファイル名うめ込みのバッチを生成したほうが、結局はやいし楽だし:)



■  おわりに

      このプログラムはいわゆるフリーソフトウェア(ＦＳＷ)です。
  
      パソ通(ｵﾝﾗｲﾝ) での非営利配布ならば作者に連絡不要で再配布してい
    ただいてかまいません。その他の場合（雑誌紹介とかディスク配布で同
    梱したいなど）事前に相談ください、ってことで.
    （あと基本的に配布時の圧縮ファイル(.LZH)のままお願いします。形式
      を変えたいとかいうばあいも要相談ってことで）

      それから作者はいかなる責任も義務も負いません。利用者の責任で用
    いてください。
      例によって十分なチェックを行ってるわけでないので（それどころか
    かなり不十分）...



							てんかﾐ☆
				NIFTY			NBB00541
				Online USA倶楽部		#10
				(旧名:100MEGA-NET|贋作倶楽部)
				ALICE-NET			3020
				XDS-NET				84


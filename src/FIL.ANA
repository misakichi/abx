module FIL
	c_name	"","",1

	import	Pri

@define IsKanji(c)  ((c >= 0x81) && (c <= 0x9f) || (c >= 0xE0 && c <= 0xFC))

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
var	FIL_zenFlg:w = 1

*proc	FIL_SetZenMode(fff:w);cdecl;far
enter
	save	ax,ds
	ds = ax = %var
	FIL_zenFlg = ax = fff
	return
endproc

*proc	FIL_GetZenMode();cdecl;far
begin
	save	ds
	ds = ax = %var
	ax = FIL_zenFlg
	return
endproc

@define	FIL_GetZenModeMACRO()		\
			push	ds;				\
				ds = ax = %var;		\
				ax = FIL_zenFlg;	\
			pop		ds;				\
			;


/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
proc STR_End(s0:d)	//;cdecl;far
enter
	save es,di,cx
	rep.inc
	es.di = s0
	repn.scan di,0,0xffff
	ax = di
	--ax
	dx = es
	return
endproc

proc STR_Cpy(dst:d,src:d)
enter
	save si,di,es,ds
	ds.si = src
	es.di = dst
	loop
		rep.load al,si
		rep.set di,al
	endloop (al != 0)
	dx.ax = dst
	return
endproc

proc STR_CpyUpr(dst:d,src:d)
enter
	save si,di,es,ds
	ds.si = src
	es.di = dst
	loop
		rep.load al,si
		if (al >= 'a' && al <= 'z')
			al -= 0x20
		fi
		rep.set di,al
	endloop (al != 0)
	dx.ax = dst
	return
endproc




/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/* ----------------------------------------------------------------------------
 ◎ FIL_SetWccMode,FIL_GetWccMode -- FIL_WcCmpの特殊文字の制御
	void FIL_SetWccMode(int flags);	// 設定
	int  FIL_GetWccMode(void);		// 取得
	フラグ
		bit 0:  ? の機能を 0:有効  1:抑止
		bit 1:  * の機能を 0:有効  1:抑止
		bit 2:  [ [^ の機能を 0:有効  1:抑止
		bit 3:  ^ の機能を 0:有効  1:抑止
		(bit 4:  MS全角     0:対応  1:非対応)


 ◎ FIL_WcCmp  -- シフトJIS 対応ワイルドカード機能付文字列比較
	int  FIL_WcCmp(B F *key, B F *st);
	proc wccmp(key:d, st:d,flg:w);cdecl
	入力
		key		ワイルドカード文字を含む文字列
		st		文字列
	出力
		ax 	結果

	文字列 key と st を比較し、マッチすれば０をしなければ０以外を返す。
	返される値の意味は、
		0		key と st はマッチした
		-1		key の指定がおかしい（ワイルドカード文字の指定ミスなど)
		-2		st は key よりも文字列長が短い
		正数n	st は 先頭 n-1 バイトで key とマッチした（st は key より長い）

	st は極端に長すぎてはいけない。一応、63Kバイトくらいに対応しているはず。
	（正確には64K - 18バイトくらい？）
	（ポインタの正規化はおこなわないので、呼び出し側で注意すること）

	文字列の終端は'\0'. 文字は全角(2ﾊﾞｲﾄ)文字も１文字として扱われる.

	ワイルド・カード文字の意味（c は 半角か全角文字の 1文字のこと）
		*	  0文字以上の任意の文字列にマッチ.
		?	  任意の1文字にマッチ.
		^c	  c 以外の任意の１文字にマッチ.
		[..]  [  ] でくくられた文字列（１文字以上）中のどれか１文字にマッチ.
		[^..] [^ ] でくくられた文字列（１文字以上）中にない１文字にマッチ.

　　括弧（[..],[^..]）のなかではワイルドカード文字の機能は抑制される。
　　括弧のなかに']' を含めたい場合は、[]abc] や [^]ed] のように、'[' や '[^'
	の直後に']'を置く。
	括弧内では、A-Z のように,'-'を用いて文字コードで A から Z の範囲を指定で
	きる。ただし、'-' の両側に文字がないといけない。[-abc] や [abc-] のよう
	に,'[' や '[^' の直後や ']' の直前に '-' があるばあい,'-'は 1文字として
	扱われる。[0-9-A] というようなのは不定扱い（実際にはこの版では[0-99-A]と
	指定されたばあいと同じ動作をして、エラーにしていない）
	あと'-' の右側の文字は左側の文字よりも大きいものを指定しなければならない。
	Z-A ではマッチしない。
   --------------------------------------------------------------------------*/
//	1992-1995	writen by M.Kitamura

var FIL_wcFlg:w = 0x08

*proc FIL_SetWccMode(flg:w);cdecl;far
enter
	save ax,ds
	ds = ax = %var
	FIL_wcFlg = ax = flg
	return
endproc

*proc FIL_GetWccMode();cdecl;far
begin
	save ds
	ds = ax = %var
	ax = FIL_wcFlg
	return
endproc

proc FIL_WcCmp_(ds.si/*key*/, es.di/*fstr*/, dx/*flg*/)
	//out ax
enter
	save bx,cx,dx,si,di,es,ds
	const _N_ = -2, _E_ = -1, _Y_ = 0
	local  sptr:word
	assume ds:nothing, es:nothing

	//ポインタの正規化はおこなわない.
	//ds.si = key
	//es.di = fstr
	sptr = di

	loop.w
		al = b[si]
		++si
		if ((dl & 0x10) == 0 && IsKanji(al))
			ah = b[si]
			go.w (ah == '\0') RTS_ERR
			ah <=> al
			++si
			gosub	CX_GET	//(di)
			go.w (ax != cx) RTS_NO
			next.w
		fi
		ah = 0
		if (al == '*' && (dl & 0x02) == 0)
			loop
				FIL_WcCmp_ ds.si, es.di, dx
				go.w (ax == _Y_) RTS_YES
				go.w (ax == _E_) RTS_ERR
				gosub	CX_GET	//(di)
			endloop (cx)
			go RTS_N
		fi
		if (al == '?' && (dl & 0x01) == 0)
			gosub	CX_GET	//(di)
			//go (cx == '\0') RTS_N
			go (cx == '\0' || cx == '.') RTS_N

		elsif (al == '^' && (dl & 0x08) == 0)
			gosub	AX_GET	//(si)
			go.w (ax == 0) RTS_ERR
			gosub	CX_GET	//(di)
			go (ax == cx) RTS_N

		elsif (al == '[' && (dl & 0x04) == 0)
			gosub	CX_GET	//(di)
			go (cx == 0) RTS_N
			gosub	AX_GET	//(si)
			dh = 0
			if (ax == '^')
				dh = 1
				gosub	AX_GET	//(si)
			fi
			bx = 0xffff
			go J0
  RTS_N:
			go RTS_NO

			loop
				if (ax == '-')
					gosub	AX_GET	//(si)
					go (ax == '\0') RTS_ERR
					if (ax == ']')
						go (bx == cx) J1
						go J2
					fi
					go (cx >= bx && cx <= ax) J1
				else
 J0:
					if (ax == cx)
 J1:
						go (dh) RTS_NO
						loop
							gosub	AX_GET	//(si)
							go (ax == 0) RTS_ERR
						endloop (ax != ']')
						exit
					fi
				fi
				bx = ax
				gosub	AX_GET	//(si)
				go (ax == '\0') RTS_ERR
				if (ax == ']')
 J2:
					exit (dh)
					go RTS_NO
				fi
			endloop

		else
			gosub CX_GET	//(di)

			if (ax != cx)
				go (ax) RTS_NO
				go ((di -= sptr) == 0) RTS_NO
				ax = di
				go RTS
			fi
			go (cx == 0) RTS_YES
		fi
	endloop// (ax)
 RTS_YES:
	ax = _Y_
 RTS:
	return

 RTS_ERR:
	ax = _E_
	go RTS_NO2

 RTS_NO:
	ax = _N_
 RTS_NO2:
	go RTS


CX_GET:	//(es.di)
//	in	  es
//	out   cx,di
//	break fx

	ch = 0
	cl = b[es:di]
	++di
	if ((dl & 0x10) == 0 && IsKanji(cl))
		ch = b[es:di]
		++di
		go (ch == 0) CX_GET_J1
		ch <=> cl
	fi
	ret
  CX_GET_J1:
	cl = 0
	ret

AX_GET:	//(ds.si)
//	in	  ds
//	out   ax,si,cf
//	break fx
	ah = 0
	al = b[si]
	++si
	if ((dl & 0x10) == 0 && IsKanji(al))
		ah = b[si]
		++si
		go (ah == 0) AX_GET_J1
		ah <=> al
	fi
	ret
  AX_GET_J1:
	al = 0
	ret

endproc

*proc FIL_WcCmp(key:dword, fstr:dword);cdecl;far
	//out ax
enter
	save cx,bx,dx,si,di,es,ds
	ds = ax = %var
	dx = FIL_wcFlg
	dl &= 0x0f
	if (FIL_zenFlg == 0)
		dl |= 0x10
	fi
	ds.si = key
	es.di = fstr
	FIL_WcCmp_ ds.si, es.di, dx
	return
endproc


/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

*proc FIL_BaseName(fnam:d);cdecl;far
enter
	save si,ds
	rep.inc
	ds.si = fnam
	dx = si
	go J1
	loop
		if (al == '/' || al == '\\' || al == ':')
			dx = si
			//++dx
		fi
		if (IsKanji(al) && b[si])
			FIL_GetZenModeMACRO
			if (ax)
				++si
			fi
		fi
  J1:
		rep.load al,si
	endloop (al != 0)
	ax = dx
	dx = ds
	return
endproc


*proc FIL_ChgExt(filename:d, ext:d);cdecl;far
enter
	save bx,cx,si,di,es,ds

	rep.inc
	dx.si = ext
	go (dx == 0 && si == 0) RET
  @if 0
	ds = dx
	go (b[si] == 0) RET
  @fi
	FIL_BaseName filename
	ds.si = dx.ax
	loop
		rep.load al,si
		go (al == '.') PRIO
	endloop (al != 0)
	b[si-1] = '.'
  PRIO:
	STR_Cpy dx.si, ext
  RET:
	dx.ax = filename
	return
endproc

*proc FIL_AddExt(filename:d, ext:d);cdecl;far
enter
	save bx,cx,si,di,es,ds

	rep.inc
	dx.si = ext
	go (dx == 0 && si == 0) RET
  @if 0
	ds = dx
	go (b[si] == 0) RET
  @fi
	FIL_BaseName filename
	ds.si = dx.ax
	loop
		rep.load al,si
		go (al == '.') RET
	endloop (al != 0)
	b[si-1] = '.'
	b[si] = 0
	STR_Cpy dx.si, ext
  RET:
	dx.ax = filename
	return
endproc


/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

*proc FIL_FullPath(src:d, dst:d);cdecl;far
	// ret dx.ax = dst
enter
	save bx,cx,si,di,es,ds
	local buf:b(520)	//はたして520バイトでいいのか^^;...

	rep.inc
	ds.si = src
	es.di = dst

	/*
	 * 絶対パスを得るためまずカレント・ドライブ＆ディレクトリ名を得る
	 */
	ax = w[si]
	if (al && ah == ':')	//ドライブ名があるときはそれを用いる
		if (al >= 'a' && al <= 'z')
			al -= 0x20
		fi
		si += 2
	else					//ドライブ名がなければDOSにカレントを聞く
		ah = 0x19
		intr 0x21
		al += 'A'
	fi
	dl = al		
	dl -= 'A'-1	//dl=ドライブ番号
	ah = ':'
	rep.set.w di,ax

	//ルートが指定されているか
	cx = &buf
	al = b[si]
	if (al == '\\' || al == '/')  //ルートなら名前をそのままbufにコピー
		STR_Cpy ss.cx, ds.si
	else					//ﾙｰﾄでないならｶﾚﾝﾄﾃﾞｨﾚｸﾄﾘをDOSに聞いて残りをｺﾋﾟｰ
		dh = 0
		//++dx
		//fil.getcdir dx, ss.cx
		push ds.si
			ds.si = ss.cx
			b[si] = '/'; ++si
			ah = 0x47
			intr 0x21
			if (cf == 0)
				ax = 0
			fi
		pop  ds.si
 //Pri.Fmt "cd %Fs\N", ss.cx
		STR_End ss.cx
		push es.di
			es.di = dx.ax
			al = b[es:di-1]
			if (al != '\\' && al != '/')
				rep.set di,'/'
			fi
			STR_Cpy es.di, ds.si
		pop  es.di 
	fi


	/*
	 * ｾﾊﾟﾚｰﾀ'\\' '/' を'/'にし、".." "."で不要ﾃﾞｨﾚｸﾄﾘ名文字列を削除
	 * （なぜ'/'にするかといえば全角の２バイト目にならないから）
	 */
	ds = ss
	si = &buf
  //Pri.Fmt "%Fs\N", ds.si
	//si += 2
	dx = di		//dx:ルート位置(戻るときに戻り過ぎないように)
	bx = di		//bx:前回のセパレータ'\\''/'の位置を保存
	loop.w
	  LOOP:
		rep.load al,si
		exit.w (al == 0)
		if (al == '\\' || al == '/')
			bx = di
			rep.set di,'/'
			//b[es:di] = 0
			go LOOP
		fi
		if (al == '.')
			rep.load.w ax,si
			if (al == '.' && (ah == '\\'||ah == '/'||ah == '\0'))
				// '..'なら一つﾃﾞｨﾚｸﾄﾘ名を削る
				if (ah == 0)
					--si
				fi
				di = bx
				loop
					if (di <= dx)
						di = bx
						go PP_1
					fi
					--di
					al = b[es:di]
				endloop (al != '/' /*&& al != '\\'*/)
				bx = di
			  PP_1:
				++di
				go LOOP

			elsif (al == '\\' || al == '/' || al == '\0')
				// '.'だけなら'.'を省く
				--si
				if (al == 0)
					--si
				fi
				di = bx
				++di
				go LOOP
			fi
			//'.'で始まるファイル名だ^^;
			si -= 2
		fi
		--si
		loop
			rep.load al,si
			--si
			exit (al == '\0' || al == '\\' || al == '/')
			FIL_GetZenModeMACRO	//全角有効モードなら全角チェック
			if (ax)
				if (b[si] && IsKanji(al))
					rep.cpy di,si
				fi
			fi
			rep.cpy di,si
		endloop
	endloop
	rep.set di,0

	/*
	 * '/' を '\\' に置き換え、英小文字を大文字化
	 */
	es.di = dst
	loop
	  L2:
		al = b[es:di]
		exit (al == 0)
		if (al == '/')
			rep.set di,'\\'
			go L2
		elsif (al >= 'a' && al <= 'z')
			al -= 'a' - 'A'
			rep.set di,al
			go L2
		else
			++di
			FIL_GetZenModeMACRO	//全角有効モードなら全角チェック
			go (ax == 0) L2
			if (b[es:di] && IsKanji(al))
				++di
			fi
		fi
	endloop

	dx.ax = dst
	return
endproc






/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
proc DOS_GetDTA()
//	DTA のアドレスを得る
//	out   es.bx
//	break ah
macro
	ah = 0x2f
	intr 0x21
endproc

proc DOS_SetDTA(ds.dx)
//	DTA のアドレスを変更する
//	in	ds
//	break ah
macro
	ah = 0x1a
	intr 0x21
endproc

proc DOS_FindFirst(ds.dx, cx)
//	out dx,cx,ax,cf
macro
	ah = 0x4e
	intr 0x21
endproc

proc DOS_FindNext()
//	out ax,cf
macro
	ah = 0x4f
	intr 0x21
endproc

struct FSLOT
	drv:b
	name:b(8)
	ext:b(3)
	attr:b
	count:w
	cluster:w
	rsv:b(4)
	fattr:b
	ftime:w
	fdate:w
	fsize:d
	fname:b(13)
	/**/
	dmy:b
	srchname:b(14)
endstruct

*proc FIL_FindFirst(fnam:d, atr:w, fslot:d);cdecl;far
enter
	save	bx,cx,dx,si,di,es,ds
	//local	buf:b(280)	/* // */
	local	savDta:d
	cvar	srchall:b() = "*.*"

	rep.inc

	// DTA アドレスを待避
	DOS_GetDTA
	savDta = es.bx

	// 一時的に DTA を fslot に変更
	ax.dx = fslot
	go.w (ax == 0 && dx == 0) ERR_ARG
	DOS_SetDTA ax.dx

	// fnam を 検索文字列 fslot.srchname と ディレクトリ buf に分け、
	// bufの後ろを"*.*" にする。
	dx.ax = fnam
	go.w (ax == 0 && dx == 0) ERR_ARG
	 //D Pri.Fmt "1 %08lx %Fs\N", dx.ax, dx.ax
	sp -= 280; bx = sp 		/* // bx = &buf */
	STR_CpyUpr ss.bx, dx.ax
	 //D Pri.Fmt "2 %08lx %Fs\N", ss.bx, ss.bx
	FIL_BaseName ss.bx
	es.di = fslot
	di += %FSLOT.srchname
	// 検索ファイル名の最後が'*.*'ならば'*'に変換
	// 		'.'がふくまれていなければ '.'を付加
	push dx.ax
		ds.si = dx.ax
		cx = 0
		dh = 1
		loop
			rep.load al,si
			rep.set  di,al
			++cx
			if (al == '.')
				dh = 0
			fi
		endloop (al != 0)
	  @if 0
		if (cx > 3 && w[es:di-4] == '*' + '.' * 0x100  &&  b[es:di-2] == '*')
			w[es:di-4] = '*' + '\0' * 0x100
	  	fi
	  @endif
	  @if 0
		if (cx > 1 && b[es:di-2] == '.')
			b[es:di-2] = '\0'
		fi
	  @else
		if (cx > 0 && dh && b[es:di-2] != '*')
			w[es:di-1] = '.' + '\0' * 0x100
		fi
	  @fi
	pop  dx.ax
	STR_Cpy dx.ax, ww(cs, &srchall)
	 //D Pri.Fmt "4 %08lx %Fs\N", dx.ax, dx.ax

	// ファイルさーち
	 //D Pri.Fmt "5 %08lx %Fs\N", ss.bx, ss.bx
	DOS_FindFirst ss.bx, atr
	go.w (cf) ERR_FIND
	sp += 280				/* // */

	// ワイルドカード文字対応でファイル名比較
	ds.cx = fslot
	di = cx
	di += %FSLOT.srchname
	cx += %FSLOT.fname
	dx = ds
	 //D Pri.Fmt "6 %08lx %Fs\N", dx.cx, dx.cx
	 //D Pri.Fmt "7 %08lx %Fs\N", dx.di, dx.di
	go J1
	loop
		DOS_FindNext
		go (cf) RET
  J1:
		 //D Pri.Fmt "8 %Fs(%08lx) vs %Fs(%08lx)\N", ds.di, ds.di, ds.cx, ds.cx
		// 拡張子無しファイルなら、とりあえず '.'を付加
		bx = 0
	  @if 1
		si = cx
		loop
			rep.load al,si
			if (al == 0)
				bx = si
				--bx
				w[bx] = '.' + '\0' * 0x100
				exit
			fi
		endloop (al != '.')
	  @endif
		FIL_WcCmp ds.di, ds.cx
	endloop (ax)

	// 拡張子無しファイル名につけた'.'は取り外す
	if (bx)
		b[bx] = 0
	fi

	//ax = 0		//ここを通るときは、すでに必ず ax = 0だ
  RET:
	push ax
		DOS_SetDTA savDta
	pop  ax
	return

 ERR_ARG:
	ax = -1
	go RET

 ERR_FIND:
	sp += 280				/* // */
	go RET

endproc


*proc FIL_FindNext(fslot:d);cdecl;far
enter
	save bx,cx,si,di,es,ds
	local savDta:d

	rep.inc
	// DTA アドレスを待避
	DOS_GetDTA
	savDta = es.bx

	// 一時的に DTA を fslot に変更
	ax.dx = fslot
	go (ax == 0 && dx == 0) ERR_ARG
	DOS_SetDTA ax.dx

	// ワイルドカード文字対応でファイル名比較
	ds.cx = fslot
	di = cx
	cx += %FSLOT.fname
	di += %FSLOT.srchname
	dx = ds
	 // Pri.Fmt "9 %08lx %Fs\N", ds.cx, ds.cx
	 // Pri.Fmt "a %08lx %Fs\N", ds.di, ds.di
	loop
		DOS_FindNext
		go (cf) RET
		 // Pri.Fmt "b %Fs(%08lx) vs %Fs(%08lx)\N", ds.di, ds.di, ds.cx, ds.cx
		// 拡張子無しファイルなら、とりあえず '.'を付加
		bx = 0
	  @if 1
		si = cx
		loop
			rep.load al,si
			if (al == 0)
				bx = si
				--bx
				w[bx] = '.' + '\0' * 0x100
				exit
			fi
		endloop (al != '.')
	  @endif
		FIL_WcCmp ds.di, ds.cx
	endloop (ax)

	// 拡張子無しファイル名につけた'.'は取り外す
	if (bx)
		b[bx] = 0
	fi

	//ax = 0		//ここを通るときは、すでに必ず ax = 0だ
  RET:
	push ax
		DOS_SetDTA savDta
	pop  ax
	return

 ERR_ARG:
	ax = -1
	go RET

endproc


/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

*proc DOS_KbdIn();cdecl;far
begin
	ah = 0x08
	intr 0x21
	ah = 0
	return
endproc

endmodule
